const express = require("express");

const path = require("path");

const { open } = require("sqlite");

const sqlite3 = require("sqlite3");

const bcrypt = require("bcrypt");

const app = express();

app.use(express.json());

const dbPath = path.join(__dirname, "userData.db");

let db = null;

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,

      driver: sqlite3.Database,
    });

    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (e) {
    console.log(`DB Error: '${e.message}'`);

    process.exit(1);
  }
};

initializeDBAndServer();

app.post("/register", async (request, response) => {
  let { username, name, password, gender, location } = request.body; //Destructuring the data from the API call
  let hashedPassword = await bcrypt.hash(password, 10); //Hashing the given password

  let checkTheUsername = `
            SELECT * FROM user WHERE username = '${username}';`;
  let userData = await db.get(checkTheUsername); //Getting the user details from the database

  if (userData === undefined) {
    let postNewUserQuery = `
            INSERT INTO
            user (username,name,password,gender,location)
            VALUES (
                '${username}',
                '${name}',
                '${hashedPassword}',
                '${gender}',
                '${location}'
            );`;

    if (password.length < 5) {
      //checking the length of the password

      response.status(400);

      response.send("Password is too short");
    } else {
      /*If password length is greater than 5 then this block will execute*/

      let newUserDetails = await db.run(postNewUserQuery); //Updating data to the database

      response.status(200);

      response.send("User created successfully");
    }
  } else {
    response.status(400);
    response.send("User already exists");
  }
});

app.post("/login", async (request, response) => {
  const { username, password } = request.body;

  const selectUserQuery = `SELECT * FROM user WHERE username = '${username}'`;

  const dbUser = await db.get(selectUserQuery);

  if (dbUser === undefined) {
    response.status(400);

    response.send("Invalid user");
  } else {
    const isPasswordMatched = await bcrypt.compare(password, dbUser.password);

    if (isPasswordMatched === true) {
      response.status(200);

      response.send("Login success!");
    } else {
      response.status(400);

      response.send("Invalid password");
    }
  }
});

app.put("/change-password", async (request, response) => {
  const { username, oldPassword, newPassword } = request.body;
  const getChangePsQuery = `SELECT * FROM user where username='${username}';`;
  const dbUSer = await db.get(getChangePsQuery);
  if (dbUSer === undefined) {
    response.status(400);
    response.send(" Invalid user");
  } else {
    const isValidPassword = await bcrypt.compare(oldPassword, dbUSer.password);
    if (isValidPassword === true) {
      const encryptedPassword = await bcrypt.hash(newPassword, 10);
      const updateQuery = `
          update user set password='${encryptedPassword}' where username='${username}';`;
      await db.run(updateQuery);
      const l_new = newPassword.length;
      if (l_new < 5) {
        response.status(400);
        response.send("Password is too short");
      } else {
        response.status(200);
        response.send("Password updated");
      }
    } else {
      response.status(400);
      response.send("Invalid current password");
    }
  }
});

module.exports = app;
